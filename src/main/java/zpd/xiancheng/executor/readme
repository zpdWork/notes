##执行器
```
接口：
  Executor：运行新任务的简单接口
  ExecutorService：扩展了executor接口，添加了一些用来管理执行器生命周期和任务生命周期的方法
  ScheduledExecutorService：扩展了executorService，支持future和定期执行任务
```

##Executor
```
executor接口只有一个execute方法，用于替代通常创建（启动）线程的方法。
例子：
  a是runnnable对象，b是executor
  正确使用：b.execute(a);
  代替使用：(new Thread(a)).start();
```
## ExecutorService
```
提供execute方法的同时，添加了更为通用的submit方法。
submit方法除了和execute方法一样，可以接受runnable对象。还可以接受Callable对象作为参数。
Callable对象：可以是任务返回执行结果，或者是管理callable、runnable任务的状态。
且提供了批量运行Callable任务的方法。
还提供了一些关闭执行器的方法。
```

##ScheduledExecutorService(计划 执行 服务)
```
扩展了executorService接口，并添加了schedule方法。
调用schedule方法可以在指定的时间执行一个callable、runnable任务。
定义了按照指定时间间隔执行任务的：
  scheduleAtFixedRate
  scheduleWithFixedDelay
```

## 线程池
```
创建一个使用线程池的执行器最简单的方法是调用：
  java.util.concurrent.Executor的newFixedThreadPool
                                newCachedThreadPool（可扩展的线程池，适合用来启动很多都短任务的应用程序）
                                newSingleThreadPool（每次执行一个任务的执行器）
  ScheduledExecutorService执行器创建的工厂方法
如以上都不满足需要，可以尝试：
java.util.concurrent.ThreadPoolExecutor
java.util.concurrent.ScheduledThreadPoolExecutor
```

##Fork/Join(JDK7 引入的 并发框架)
```
ExecutorService接口的具体实现
框架核心是ForkJoinPool类，这个类是对AbstractExecutorService类的扩展；ForkJoinPool实现了工作窃取算法，并可以执行ForkJoinTask任务。
基本使用：
   java.util.Arrays.parallelSort()
   java.util.streams包中的一些方法
```

##并发集合
```
BlockingQueue：定义了一个“先进先出”的数据结构，当你尝试往“满”队列中添加元素，或者从“空”队列中获取元素时，都将会阻塞或者超时。
ConcurrentMap：是java.util.Map的子接口；标准实现是ConcureeHashMap，是HashMap的并发模式。
ConcurrentNavigableMap：是ConcurrentMap的子接口；标准实现是ConcurrentSkipListMap,是TreeMap的并发模式。

这些集合，操作之间定义一个happens-before的关系，避免内存一致性错误。
```


