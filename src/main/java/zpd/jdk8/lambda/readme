##lambde
```
带有参数标量的表达式都被称为lambde表达式。

一个lambda表达式包括三个部分：
1.一段代码
2.参数
3.自由变量的值（这里的“自由”，指的是那些不是参数并且没有在代码中定义的变量）
```

##格式
```
1.参数、箭头 ->、以及一个表达式

2.如果代码无法用一个表达式表示，可以用编写方法的方式来编写：用{}包裹代码，并使用return返回。
例如：(String str1,String str2) -> {...}

3.如果没有参数，就用() -> {]

4.如果一个lambde表达式的参数类型是可以被推导的，那么就可以省略他们的类型
例如：(str1,str2)->Integer.compare(str1.length(),str2.length());
```

##函数式接口
```@FunctionalInterface```

##方法引用
```
::操作符将方法名和对象或类的名字分隔开来。以下是三种主要的使用情况：
1.对象::实例方法
2.类::静态方法
3.类::实例方法

this:：当前的（引用创建该lambda表达式的方法的this参数；见demo2 ）
super::父类中的
```

##构造器引用
```在构造器引用中方法名是new```

##变量作用域
```见demo1-repeatMessage```

##闭包
```
含有自由变量的代码块被称之为“闭包”；
在Java中lambda表达式就是闭包。
```

##接口的默认方法
```
1.接口方法中可以有一个默认方法，实现这个接口的可以选择保留、重写这个默认方法
2.如果实现的2个接口中，有命名相同的默认方法，则需要手动指定一个见demo3
3.如果是继承的父类和实现的接口，有同一个命名的方法，只有父类中的方法会起作用，接口中的任何默认方法都会被忽略。
```